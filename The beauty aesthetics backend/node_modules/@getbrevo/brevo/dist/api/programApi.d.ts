import http from 'http';
import { AddSubscriptionMemberPayload } from '../model/addSubscriptionMemberPayload';
import { CreateLoyaltyProgramPayload } from '../model/createLoyaltyProgramPayload';
import { CreateSubscriptionPayload } from '../model/createSubscriptionPayload';
import { LoyaltyProgram } from '../model/loyaltyProgram';
import { LoyaltyProgramPage } from '../model/loyaltyProgramPage';
import { PatchLoyaltyProgramPayload } from '../model/patchLoyaltyProgramPayload';
import { Subscription } from '../model/subscription';
import { SubscriptionHandlerInfo } from '../model/subscriptionHandlerInfo';
import { SubscriptionMember } from '../model/subscriptionMember';
import { UpdateLoyaltyProgramPayload } from '../model/updateLoyaltyProgramPayload';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum ProgramApiApiKeys {
    apiKey = 0,
    partnerKey = 1
}
export declare class ProgramApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        apiKey: ApiKeyAuth;
        partnerKey: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ProgramApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    createNewLP(body: CreateLoyaltyProgramPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: LoyaltyProgram;
    }>;
    deleteContactMembers(pid: string, memberContactIds: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    deleteLoyaltyProgram(pid: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    getLPList(limit?: number, offset?: number, sortField?: 'name' | 'created_at' | 'updated_at', sort?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: LoyaltyProgramPage;
    }>;
    getLoyaltyProgramInfo(pid: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: LoyaltyProgram;
    }>;
    getParameterSubscriptionInfo(pid: string, contactId?: string, params?: string, loyaltySubscriptionId?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SubscriptionHandlerInfo;
    }>;
    partiallyUpdateLoyaltyProgram(pid: string, body: PatchLoyaltyProgramPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: LoyaltyProgram;
    }>;
    publishLoyaltyProgram(pid: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    subscribeMemberToASubscription(pid: string, body: AddSubscriptionMemberPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SubscriptionMember;
    }>;
    subscribeToLoyaltyProgram(pid: string, body: CreateSubscriptionPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Subscription;
    }>;
    updateLoyaltyProgram(pid: string, body: UpdateLoyaltyProgramPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: LoyaltyProgram;
    }>;
}
