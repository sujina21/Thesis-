import http from 'http';
import { Balance } from '../model/balance';
import { BalanceDefinition } from '../model/balanceDefinition';
import { BalanceDefinitionPage } from '../model/balanceDefinitionPage';
import { BalanceLimit } from '../model/balanceLimit';
import { BalanceOrder } from '../model/balanceOrder';
import { ContactBalancesResp } from '../model/contactBalancesResp';
import { CreateBalanceDefinitionPayload } from '../model/createBalanceDefinitionPayload';
import { CreateBalanceLimitPayload } from '../model/createBalanceLimitPayload';
import { CreateBalancePayload } from '../model/createBalancePayload';
import { CreateOrderPayload } from '../model/createOrderPayload';
import { CreateTransactionPayload } from '../model/createTransactionPayload';
import { ModelSubscriptionBalanceResp } from '../model/modelSubscriptionBalanceResp';
import { Transaction } from '../model/transaction';
import { TransactionHistoryResp } from '../model/transactionHistoryResp';
import { UpdateBalanceDefinitionPayload } from '../model/updateBalanceDefinitionPayload';
import { UpdateBalanceLimitPayload } from '../model/updateBalanceLimitPayload';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum BalanceApiApiKeys {
    apiKey = 0,
    partnerKey = 1
}
export declare class BalanceApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        apiKey: ApiKeyAuth;
        partnerKey: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: BalanceApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    beginTransaction(pid: string, body: CreateTransactionPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Transaction;
    }>;
    cancelTransaction(pid: string, tid: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Transaction;
    }>;
    completeTransaction(pid: string, tid: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Transaction;
    }>;
    createBalanceLimit(pid: string, bdid: string, body: CreateBalanceLimitPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: BalanceLimit;
    }>;
    createBalanceOrder(pid: string, body: CreateOrderPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: BalanceOrder;
    }>;
    deleteBalanceDefinition(pid: string, bdid: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    deleteBalanceLimit(pid: string, bdid: string, blid: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    getBalanceDefinition(pid: string, bdid: string, version?: 'active' | 'draft', options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: BalanceDefinition;
    }>;
    getBalanceDefinitionList(pid: string, limit?: number, offset?: number, sortField?: 'name' | 'created_at' | 'updated_at', sort?: 'asc' | 'desc', version?: 'active' | 'draft', options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: BalanceDefinitionPage;
    }>;
    getBalanceLimit(pid: string, bdid: string, blid: string, version?: 'active' | 'draft', options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: BalanceLimit;
    }>;
    getContactBalances(pid: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ContactBalancesResp;
    }>;
    getSubscriptionBalances(cid: number, pid: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ModelSubscriptionBalanceResp;
    }>;
    loyaltyBalanceProgramsPidActiveBalanceGet(pid: string, contactId: number, balanceDefinitionId: string, limit?: number, offset?: number, sortField?: string, sort?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: BalanceLimit;
    }>;
    loyaltyBalanceProgramsPidBalanceDefinitionsPost(pid: string, body: CreateBalanceDefinitionPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: BalanceDefinition;
    }>;
    loyaltyBalanceProgramsPidSubscriptionsCidBalancesPost(pid: string, cid: number, body: CreateBalancePayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Balance;
    }>;
    loyaltyBalanceProgramsPidTransactionHistoryGet(pid: string, contactId: number, balanceDefinitionId: string, limit?: number, offset?: number, sortField?: 'name' | 'created_at' | 'updated_at', sort?: 'asc' | 'desc', filters?: Array<string>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TransactionHistoryResp;
    }>;
    updateBalanceDefinition(pid: string, bdid: string, body: UpdateBalanceDefinitionPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: BalanceDefinition;
    }>;
    updateBalanceLimit(pid: string, bdid: string, blid: string, body: UpdateBalanceLimitPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: BalanceLimit;
    }>;
}
