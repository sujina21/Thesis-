import http from 'http';
import { MainAttributeRewardPayload } from '../model/mainAttributeRewardPayload';
import { MainCodeCountHttpResponse } from '../model/mainCodeCountHttpResponse';
import { MainCreateRedeemPayload } from '../model/mainCreateRedeemPayload';
import { MainCreateRewardPayload } from '../model/mainCreateRewardPayload';
import { MainCreateRewardResponse } from '../model/mainCreateRewardResponse';
import { MainModelContactRewardsResp } from '../model/mainModelContactRewardsResp';
import { MainRedeem } from '../model/mainRedeem';
import { MainReward } from '../model/mainReward';
import { MainRewardAttribution } from '../model/mainRewardAttribution';
import { MainRewardPage } from '../model/mainRewardPage';
import { MainRewardValidate } from '../model/mainRewardValidate';
import { MainValidateRewardPayload } from '../model/mainValidateRewardPayload';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum RewardApiApiKeys {
    apiKey = 0,
    partnerKey = 1
}
export declare class RewardApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        apiKey: ApiKeyAuth;
        partnerKey: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: RewardApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    getCodeCount(pid: string, cpid: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MainCodeCountHttpResponse;
    }>;
    loyaltyOfferProgramsPidOffersGet(pid: string, limit?: number, offset?: number, state?: string, version?: 'active' | 'draft', options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MainRewardPage;
    }>;
    loyaltyOfferProgramsPidOffersPost(pid: string, payload: MainCreateRewardPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MainCreateRewardResponse;
    }>;
    loyaltyOfferProgramsPidRewardsAttributePost(pid: string, payload: MainAttributeRewardPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MainRewardAttribution;
    }>;
    loyaltyOfferProgramsPidRewardsRedeemPost(pid: string, payload: MainCreateRedeemPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MainRedeem;
    }>;
    loyaltyOfferProgramsPidRewardsRedeemTidCompletePost(pid: string, tid: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MainRedeem;
    }>;
    loyaltyOfferProgramsPidRewardsRevokeDelete(pid: string, attributedRewardIds?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    loyaltyOfferProgramsPidRewardsRidGet(pid: string, rid: string, version?: 'active' | 'draft', options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MainReward;
    }>;
    loyaltyOfferProgramsPidRewardsValidatePost(pid: string, body: MainValidateRewardPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MainRewardValidate;
    }>;
    loyaltyOfferProgramsPidVouchersGet(pid: string, contactId: number, limit?: number, offset?: number, sort?: 'asc' | 'desc', sortField?: 'updatedAt' | 'createdAt', metadataKeyValue?: string, rewardId?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MainModelContactRewardsResp;
    }>;
}
